//===========================================================================
// dcc_lex.h
//   Copyright (C) 2012 Free Software Foundation, Inc.
//   Originally by ZhaoFeng Liang <zhf.liang@hotmail.com>
//
//This file is part of DTAHS_DCC.
//
//DTAHS_DCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or 
//(at your option) any later version.
//
//DTAHS_DCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with DTHAS; If not, see <http://www.gnu.org/licenses/>.  
//===========================================================================

#ifndef	_DCC_LEX_H_
#define	_DCC_LEX_H_

PUBLIC s32 * p_lex_state_tab;

#define	IDEN_LEN	64

//-------------------------------------------------------------------------
// state table param  
//-------------------------------------------------------------------------
#define	STATES		128		//
#define	INPUT_CHARS	128		//


//-------------------------------------------------------------------------
// other word
//-------------------------------------------------------------------------
#define	IDENTIFIER	2

#define	SPACE		3		//
#define	COMMENT_S	4		// //
#define	COMMENT_M_BEGIN	5		// /*
#define	COMMENT_M_END	6		// */
#define	SEMICOLON	7		// ;

//-------------------------------------------------------------------------
// key word
//-------------------------------------------------------------------------
#define	AUTO		10
#define	BREAK		11
#define	CASE		12
#define	CHAR		13
#define	CONST		14
#define	CONTINUE	15
#define	DEFAULT		16
#define	DO		17
#define	DOUBLE		18
#define	ELSE		19
#define	ENUM		20
#define	EXTERN		21
#define	FLOAT		22
#define	FOR		23
#define	GOTO		24
#define	IF		25
#define	INT		26
#define	LONG		27
#define	REGISTER	28
#define	RETURN		29
#define	SHORT		30
#define	SIGNED		31
#define	SIZEOF		32
#define	STATIC		33
#define	STRUCT		34
#define	SWITCH		35
#define	TYPEDEF		36
#define	UNION		37
#define	UNSIGNED	38
#define	VOID		39
#define	VOLATILE	40
#define	WHILE		41

//-------------------------------------------------------------------------
// const
//-------------------------------------------------------------------------

// 1) const int
#define	CONST_S_INT_8	42
#define	CONST_S_INT_16	43
#define	CONST_S_INT_32	44
#define	CONST_S_INT_64	45
#define	CONST_S_INT_128	46
#define	CONST_U_INT_8	47
#define	CONST_U_INT_16	48
#define	CONST_U_INT_32	49
#define	CONST_U_INT_64	50
#define	CONST_U_INT_128	51


// 2) const char
#define	CONST_NL	55
#define	CONST_HT	56
#define	CONST_VT	57
#define	CONST_BS	58
#define	CONST_CR	59
#define	CONST_FF	60
#define	CONST_BEL	61
#define	CONST_BACKSLASH	62
#define	CONST_QMARK	63
#define	CONST_S_QUOTE	64
#define	CONST_D_QUOTE	65
#define	CONST_OCT	66
#define	CONST_HEX	67

// 3) string const
#define	CONST_STRING	69

// 4) const float

#define	CONST_FLOAT	70
#define	CONST_DOUBLE	71
#define	CONST_S_SCIENCE	72
#define	CONST_U_SCIENCE	73


//-------------------------------------------------------------------------
// operator
//-------------------------------------------------------------------------

// 1) unary operator
#define	OP_PLUS		80		// +
#define	OP_MINUS	81		// -
#define	OP_MUL		82		// *
#define	OP_DIV		83		// /
#define	OP_MOD		84		// %

#define	OP_AND		85		// &
#define	OP_NOT		86		// !
#define	OP_NEG		87		// ~
#define	OP_OR		88		// |
#define	OP_XOR		89		// ^

// 2) binary operator
#define	OP_PLUS_PLUS	90		// ++
#define	OP_MINUS_MINUS	91		// --

#define	OP_AND_AND	92		// &&
#define	OP_OR_OR	93		// ||
#define	OP_EQU_EQU	94		// ==
#define	OP_LOW_EQU	95		// <=
#define	OP_ABOVE_EQU	96		// >=
#define	OP_NOT_EQU	97		// !=

#define	OP_PLUS_EQU	98		// +=
#define	OP_MINUS_EQU	99		// -=
#define	OP_MUL_EQU	100		// *=
#define	OP_DIV_EQU	101		// /=
#define	OP_MOD_EQU	102		// %=

// 3) shift operator
#define	OP_SHIFT_LEFT	103		// <<
#define	OP_SHIFT_RIGHT	104		// >>
#define	OP_SHIFT_LEFT_EQU	105	// <<=
#define	OP_SHIFT_RIGHT_EQU	106	// >>=

// 4) other operator
#define	OP_AND_EQU	107		// &=
#define	OP_OR_EQU	108		// |=
#define	OP_XOR_EQU	109		// ^=
#define	OP_EQU		110		// =
#define	OP_Q_COND	111		// ?:
#define	OP_LOW		112		// <
#define	OP_ABOVE	113		// >
#define	OP_COMMA	114		// ,
#define	OP_DOT		115		// .
#define	OP_POINTOR	116		// ->
#define	OP_COLON	117		// :

//-------------------------------------------------------------------------
// delimiter
//-------------------------------------------------------------------------
#define	OP_L_PARENTHESE	120		// (
#define	OP_R_PARENTHESE	121		// )
#define	OP_L_BRACKET	122		// [
#define	OP_R_BRACKET	123		// ]
#define	OP_L_BRACE	124		// {
#define	OP_R_BRACE	125		// }

//-------------------------------------------------------------------------
// pre_define
//------------------------------------------------------------------------- 
#define	PRE_DEFINE	128		// #define
#define	PRE_UNDEF	129		// #undef
#define	PRE_INCLUDE	130		// #include
#define	PRE_LINE	131		// #line
#define	PRE_ERROR	132		// #error
#define	PRE_PRAGMA	133		// #pragma
#define	PRE_IF		134		// #if
#define	PRE_IFDEF	135		// #ifdef
#define	PRE_IFNDEF	136		// #ifndef
#define	PRE_ELIF	137		// #elif
#define	PRE_ELSE	138		// #else
#define	PRE_ENDIF	139		// #endif


//-------------------------------------------------------------------------
// define states
//-------------------------------------------------------------------------
#define	STATE_END	-1		// end state 
#define	STATE1		0		// start state 
#define	STATE2		1		// 
#define	STATE3		2		//
#define	STATE4		3		//
#define	STATE5		4		// 
#define	STATE6		5		//
#define	STATE7		6		//
#define	STATE8		7		// 
#define	STATE9		8		//
#define	STATE10		9		//
#define	STATE11		10		// 
#define	STATE12		11		//
#define	STATE13		12		//
#define	STATE14		13		// 
#define	STATE15		14		//
#define	STATE16		15		//
#define	STATE17		16		// 
#define	STATE18		17		//
#define	STATE19		18		//
#define	STATE20		19		// 
#define	STATE21		20		//
#define	STATE22		21		//
#define	STATE23		22		// 
#define	STATE24		23		//
#define	STATE25		24		//
#define	STATE26		25		// 
#define	STATE27		26		//
#define	STATE28		27		//
#define	STATE29		28		// 
#define	STATE30		29		//
#define	STATE31		30		//
#define	STATE32		31		// 
#define	STATE33		32		//
#define	STATE34		33		//
#define	STATE35		34		// 
#define	STATE36		35		//
#define	STATE37		36		//
#define	STATE38		37		// 
#define	STATE39		38		//
#define	STATE40		39		//
#define	STATE41		40		// 
#define	STATE42		41		//
#define	STATE43		42		//
#define	STATE44		43		// 
#define	STATE45		44		//
#define	STATE46		45		//
#define	STATE47		46		// 
#define	STATE48		47		//
#define	STATE49		48		//
#define	STATE50		49		// 
#define	STATE51		50		//
#define	STATE52		51		//
#define	STATE53		52		// 
#define	STATE54		53		//
#define	STATE55		54		//
#define	STATE56		55		// 
#define	STATE57		56		//
#define	STATE58		57		//
#define	STATE59		58		// 
#define	STATE60		59		//
#define	STATE61		60		//
#define	STATE62		61		// 
#define	STATE63		62		//
#define	STATE64		63		//
#define	STATE65		64		// 
#define	STATE66		65		//
#define	STATE67		66		//
#define	STATE68		67		// 
#define	STATE69		68		//
#define	STATE70		69		//
#define	STATE71		70		// 
#define	STATE72		71		//
#define	STATE73		72		//
#define	STATE74		73		// 
#define	STATE75		74		//
#define	STATE76		75		//
#define	STATE77		76		// 
#define	STATE78		77		//
#define	STATE79		78		//
#define	STATE80		79		// 
#define	STATE81		80		//
#define	STATE82		81		//


//-------------------------------------------------------------------------
// define characters(0 ~ 127)  
//-------------------------------------------------------------------------
//0~31: invisible characters
#define	CH_LF		10		//
#define	CH_CR		13		//

#define	CH_SPACE	32		//
#define	CH_GT		33		// !
#define	CH_DQ		34		// "
#define	CH_PROMPT	35		// #
#define	CH_DOLLAR	36		// $
#define	CH_BF		37		// %
#define	CH_AND		38		// &
#define	CH_SQ		39		// '
#define	CH_LP		40		// (
#define	CH_RP		41		// )
#define	CH_MUL		42		// *
#define	CH_ADD		43		// +
#define	CH_COMMA	44		// ,
#define	CH_MINUS	45		// -
#define	CH_DOT		46		// .
#define	CH_DIV		47		// /
#define	CH_0		48		//
#define	CH_1		49		//
#define	CH_2		50		//
#define	CH_3		51		//
#define	CH_4		52		//
#define	CH_5		53		//
#define	CH_6		54		//
#define	CH_7		55		//
#define	CH_8		56		//
#define	CH_9		57		//
#define	CH_COL		58		// :
#define	CH_SEMICOL	59		// ;
#define	CH_LOW		60		// <
#define	CH_EQU		61		// =
#define	CH_ABOVE	62		// >
#define	CH_QUEST	63		// ?
#define	CH_AT		64		// @
#define	CH_A		65		//
#define	CH_B		66		//
#define	CH_C		67		//
#define	CH_D		68		//
#define	CH_E		69		//
#define	CH_F		70		//
#define	CH_G		71		//
#define	CH_H		72		//
#define	CH_I		73		//
#define	CH_J		74		//
#define	CH_K		75		//
#define	CH_L		76		//
#define	CH_M		77		//
#define	CH_N		78		//
#define	CH_O		79		//
#define	CH_P		80		//
#define	CH_Q		81		//
#define	CH_R		82		//
#define	CH_S		83		//
#define	CH_T		84		//
#define	CH_U		85		//
#define	CH_V		86		//
#define	CH_W		87		//
#define	CH_X		88		//
#define	CH_Y		89		//
#define	CH_Z		90		//
#define	CH_LB		91		// [
#define	CH_BS		92		// BACK SLASH "\"
#define	CH_RB		93		// ]
#define	CH_AF		94		// ^
#define	CH_UL		95		// _
#define	CH_BCOMMA	96		// `
#define	CH_a		97		//
#define	CH_b		98		//
#define	CH_c		99		//
#define	CH_d		100		//
#define	CH_e		101		//
#define	CH_f		102		//
#define	CH_g		103		//
#define	CH_h		104		//
#define	CH_i		105		//
#define	CH_j		106		//
#define	CH_k		107		//
#define	CH_l		108		//
#define	CH_m		109		//
#define	CH_n		110		//
#define	CH_o		111		//
#define	CH_p		112		//
#define	CH_q		113		//
#define	CH_r		114		//
#define	CH_s		115		//
#define	CH_t		116		//
#define	CH_u		117		//
#define	CH_v		118		//
#define	CH_w		119		//
#define	CH_x		120		//
#define	CH_y		121		//
#define	CH_z		122		//
#define	CH_LBB		123		// {
#define	CH_VL		124		// |
#define	CH_RBB		125		// }
#define	CH_REV		126		// ~

//127 is DEL


#endif
