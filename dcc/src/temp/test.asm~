
[BITS	32]
global	L0
global	s123
global	mp
global	L1
global	m777

[section .data]
;==================================================================
;global
;==================================================================
s123	resb	4
mp	resb	8
m777	resb	4

[section .test]

--------------------------------------------------------------
L1:
push	ebp
mov	ebp, esp
--------------------------------------------------------------
mov	eax,1
mov	dword[ebp+0],eax
mov	eax,2
mov	dword[ebp+16+4],eax

--------------------------------------------------------------
L0:
push	ebp
mov	ebp, esp
--------------------------------------------------------------
mov	eax,1
mov	dword[ebp+0],eax
mov	ebx, dword[ebp+0]
mov	eax,3
add	eax, ebx
mov	[3],eax
mov	eax,3
mov	dword[ebp+4],eax
mov	ebx, dword[ebp+4]
mov	eax, dword[ebp+0]
add	eax, ebx
mov	dword[ebp+0],eax
mov	eax, dword[ebp+0]
mov	dword[ebp-12],eax
mov	ebx, dword[ebp-12]
mov	eax, dword[ebp+0]
mul	bx
mov	dword[ebp+0],eax
mov	ebx, dword[ebp+02]
mov	eax, dword[ebp+4]
div	bx
mov	dword[ebp+4],eax
mov	ebx, dword[ebp+42]
mov	eax, dword[ebp+0]
div	ebx
mov	dword[ebp+0],edx
mov	eax, dword[ebp+0]
mov	dword[ebp-8],eax
mov	ebx, dword[ebp+02]
mov	eax,1bp+0
add	eax, ebx
mov	[1bp+0],eax
mov	eax,1
mov	dword[ebp+12+4],eax
mov	eax, dword[1]
mov	dword[ebp+4],eax
mov	ebx, dword[ebp+02]
mov	eax,bbp+0
add	eax, ebx
mov	[bbp+0],eax
mov	eax,b
mov	dword[ebp+8],eax
mov	ebx, dword[ebp+02]
mov	eax, dword[ebp+4]
add	eax, ebx
mov	dword[ebp+4],eax
mov	ebx, dword[ebp+42]
mov	eax,1bp+4
sub	eax, ebx
mov	[1bp+4],eax
mov	eax,1
mov	dword[ebp+16],eax
mov	ebx, dword[ebp+02]
mov	eax, dword[ebp+4]
mul	bx
mov	dword[ebp+4],eax
mov	ebx, dword[ebp+42]
mov	eax, dword[ebp-8]
div	bx
mov	dword[ebp-8],eax
mov	eax, dword[ebp-8]
mov	dword[ebp+20],eax
push	dword[ebp-8]
push	dword[ebp-12]
push	dword[ebp+4]
call	L1
mov	dword[0x9905250],eax
mov	eax, dword[ebp-8]
mov	dword[ebp+0],eax
