//===========================================================================
// ir_code_lib.c
//   Copyright (C) 2012 Free Software Foundation, Inc.
//   Originally by ZhaoFeng Liang <zhf.liang@hotmail.com>
//
//This file is part of DTAHS_DCC.
//
//DTAHS_DCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or 
//(at your option) any later version.
//
//DTAHS_DCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with DTHAS; If not, see <http://www.gnu.org/licenses/>.  
//===========================================================================

#include	"dcc_global.h"
#include	"dcc_type.h"
#include	"dcc_symtbl.h"
#include	<stdio.h>
#include	"dcc_main.h"
#include	"dcc_lex_char.h"
#include	"dcc_lex_word.h"
#include	"dcc_parse.h"
#include	"dcc_seman.h"
#include	"dcc_frame.h"
#include	"dcc_ir.h"
#include	"dcc_pasm.h"
#include	"dcc_prototype.h"

#define	IR_DEBUG

//===========================================================================
// add(u32 src, u32 dst)
//===========================================================================
PUBLIC	s32	add(u32 src, u32 dst)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- add -- \n");
#endif
//--------------------------

	return (*src + *dst);
}

//===========================================================================
// minus(u32 src, u32 dst)
//===========================================================================
PUBLIC	s32	minus(u32 src, u32 dst)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- minus -- \n");
#endif
//--------------------------

	return (*src - *dst);
}

//===========================================================================
// move(u32 *addr, u32 val)
//===========================================================================
PUBLIC	void	move(u32 *addr, u32 type_len, u32 val)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- move -- \n");
#endif
//--------------------------
	switch(type_len)
	{
		case 1:
			*(s8*)addr	= val;
			break;
		case 2:
			*(s16*)addr	= val;
			break;
		case 4:
			*(s32*)addr	= val;
			break;
		default:
			break;
	}
}


//===========================================================================
//cmp(u32 left, u32 right)
//===========================================================================
PUBLIC	s8	cmp(u32 left, u32 right, u32 op)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- cmp -- \n");
#endif
//--------------------------

	switch(op)
	{
		case IR_LOW:
			return ((*left < *right) ? TRUE : FALSE);
			break;
		case IR_ABOVE:
			return ((*left > *right) ? TRUE : FALSE);
			break;
		case IR_EQU_EQU:
			return ((*left == *right) ? TRUE : FALSE);
			break;
		case IR_LOW_EQU:
			return ((*left <= *right) ? TRUE : FALSE);
			break;
		case IR_ABOVE_EQU:
			return ((*left >= *right) ? TRUE : FALSE);
			break;
		case IR_NOT_EQU:
			return ((*left != *right) ? TRUE : FALSE);
			break;
		default:
			break;
	}
}

//===========================================================================
//jump(struct relate *cond, u32 label_1, u32 label_2)
//===========================================================================
PUBLIC	s8	jump(struct cmp *cond, u32 label_1, u32 label_2)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- jump -- \n");
#endif
//--------------------------

	if(cmp(cond->left, cond->right, cond->op))
	{
		return label_1;
	}
	else
	{
		return label_2;
	}
}

//===========================================================================
// mem(u32 *addr, u32 offset)
//===========================================================================
PUBLIC	u32	mem(u32 *addr, u32 offset)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- mem -- \n");
#endif
//--------------------------

	addr	+= offset;
	
	return addr;
}

//===========================================================================
// load(u32 *addr, u32 offset)
//===========================================================================
PUBLIC	u32	load(u32 *addr, u32 offset)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- load -- \n");
#endif
//--------------------------

	addr	+= offset;
	
	return *addr;
}

//===========================================================================
// save(u32 *addr, u32 offset, u32 val)
//===========================================================================
PUBLIC	void	save(u32 *addr, u32 offset, u32 val)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- save -- \n");
#endif
//--------------------------

	addr	+= offset;
	*addr	= val;
	
}

//===========================================================================
// call(s8* label, struct ir_pvlist *pvlist)
//===========================================================================
PUBLIC	struct pcall *	call(s8* label, struct ir_pvlist *pvlist)
{
//--------------------------
//test
#ifdef	IR_DEBUG
	printf("-- call -- \n");
#endif
//--------------------------

	struct pcall *p	= malloc(sizeof(struct pcall));

	p->label_name	= label;
	p->pvlist	= pvlist;

	return p;
	
}
