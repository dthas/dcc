//===========================================================================
// pasm_libt.c
//   Copyright (C) 2012 Free Software Foundation, Inc.
//   Originally by ZhaoFeng Liang <zhf.liang@hotmail.com>
//
//This file is part of DTAHS_DCC.
//
//DTAHS_DCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or 
//(at your option) any later version.
//
//DTAHS_DCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with DTHAS; If not, see <http://www.gnu.org/licenses/>.  
//===========================================================================

#include	"dcc_global.h"
#include	"dcc_type.h"
#include	"dcc_symtbl.h"
#include	<stdio.h>
#include	"dcc_main.h"
#include	"dcc_lex_char.h"
#include	"dcc_lex_word.h"
#include	"dcc_parse.h"
#include	"dcc_seman.h"
#include	"dcc_frame.h"
#include	"dcc_ir.h"
#include	"dcc_pasm.h"
#include	"dcc_prototype.h"

#define	PASM_DEBUG

PRIVATE	s8 exp_kind_info[12][IR_WORD_LEN] = {"PASM_ADD", "PASM_MINUS","PASM_MUL", "PASM_DIV", "PASM_MOD", "PASM_MOV", 
						"PASM_CMP","PASM_LOAD_MEM","PASM_SAVE_MEM","PASM_JUMP", "PASM_CALL","PASM_MEM"};
//===========================================================================
// ir_explist_process(struct ir_explist *explist)
//===========================================================================
PUBLIC	void	pr_pasm_main()
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("-- print_pasm -- (pcur_file=0x%x)\n",pcur_file);
#endif
//--------------------------

	pr_pasm_file_process(pcur_file);
}

//===========================================================================
// ir_explist_process(struct ir_explist *explist)
//===========================================================================
PUBLIC	void	pr_pasm_file_process(struct pasm_file *f)
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("-- pasm_file_process -- \n");
#endif
//--------------------------

	for(; f; f=f->tail)
	{
		pr_pasm_stslist_process(f->stslist);
	}
}

//===========================================================================
// ir_explist_process(struct ir_explist *explist)
//===========================================================================
PUBLIC	void	pr_pasm_stslist_process(struct pasm_stslist *pstslist)
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("-- pr_pasm_stslist_process -- \n");
#endif
//--------------------------

	for(; stslist; stslist=stslist->tail)
	{
		pr_pasm_sts_process(pstslist->sts);
	}
}

//===========================================================================
// ir_explist_process(struct ir_explist *explist)
//===========================================================================
PUBLIC	void	pr_pasm_sts_process(struct pasm_sts * *sts)
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("%5s %10s \n","","-- pr_pasm_sts_process --");
#endif
//--------------------------

	if(sts)
	{
		switch(sts->k)
		{
			case PASM_LABEL:
				break;
			case PASM_EXP:
				pr_pasm_explist_process(sts->s.exp_sts.pexplist);
				break;
		}
	}
}

//===========================================================================
// ir_explist_process(struct ir_explist *explist)
//===========================================================================
PUBLIC	void	pr_pasm_explist_process(struct pasm_explist *explist)
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("%15s %10s\n","","-- pr_pasm_explist_process --");
#endif
//--------------------------


	for(; explist; explist=explist->tail)
	{
		pr_pasm_exp_process(explist->exp);		
	}
}


//===========================================================================
// pasm_exp_process
//===========================================================================
PUBLIC	void	pr_pasm_exp_process(struct pasm_exp *exp)
{
//--------------------------
//test
#ifdef	PASM_DEBUG
	printf("%20s %10s \n","","--pr_pasm_exp_process --");
#endif
//--------------------------

	if(exp)
	{

//--------------------------
//test
#ifdef	IR_DEBUG
	printf("%25s ----(exp_kind=%s) \n","",exp_kind_info[exp->k - IR_EXPKIND_BASE]);
#endif
//--------------------------

		switch(exp->k)
		{
			case PASM_ADD:
				printf("Add(left:%x, left(len):%d, right:%x, right(len):%d)\n", exp->e.add.src, exp->e.add.src_len, exp->e.add.dst,
					exp->e.add.dst_len);			
				break;

			case PASM_MINUS:
				printf("Minus(left:%x, left(len):%d, right:%x, right(len):%d)\n", exp->e.minus.src, exp->e.minus.src_len, 
					exp->e.minus.dst, exp->e.minus.dst_len);				
				break;

			case PASM_MUL:
				printf("Mul(left:%x, left(len):%d, right:%x, right(len):%d)\n", exp->e.mul.src, exp->e.mul.src_len, 
					exp->e.mul.dst, exp->e.mul.dst_len);				
				break;

			case PASM_DIV:
				printf("Div(left:%x, left(len):%d, right:%x, right(len):%d)\n", exp->e.div.src, exp->e.div.src_len, 
					exp->e.div.dst, exp->e.div.dst_len);				
				break;

			case PASM_MINUS:
				printf("Minus(left:%x, left(len):%d, right:%x, right(len):%d)\n", exp->e.minus.src, exp->e.minus.src_len, 
					exp->e.minus.dst, exp->e.minus.dst_len);				
				break;

			case PASM_MEM:
				printf("Load(addr:%x, type_len:%d, num:%d)\n",exp->e.mem.addr, exp->e.mem.type_len, exp->e.mem.num);
				break;

			case PASM_CMP:
				printf("Cmp(left:%x, left(len):%d, right:%x, right(len):%d, op:%d)\n", exp->e.cmp.left, exp->e.cmp.left_len, 
					exp->e.cmp.right, exp->e.cmp.right_len, exp->e.cmp.op);
				

			case PASM_LOAD_MEM:
				printf("Load(addr:%x, type_len:%d, num:%d)\n",exp->e.load.m->e.mem.addr, exp->e.load.m->e.mem.type_len, 
					exp->e.load.m->e.mem.num);	
				break;
				

			case PASM_SAVE_MEM:
				printf("Save(addr:%x, type_len:%d, num:%d, val:%x)\n",exp->e.save.m->e.mem.addr, exp->e.save.m->e.mem.type_len, 
					exp->e.save.m->e.mem.num, exp->e.save.val);
				break;

			case PASM_JUMP:
				printf("Jump(label_1:%x, label_2:%x, cond:", exp->e.cond.label_1, exp->e.cond.label_2);
				pr_pasm_exp_process(exp->e.jump.cond.cond);
				break;

			case PASM_CALL:
				printf("Call(label:%s, pvlist:%x)\n",exp->e.call.label_name, exp->e.call.pvlist);
				break;

			case PASM_MOV:
				printf("Move(res:%x, type_len:%d, val:%d)\n",exp->e.move.res, exp->e.move.type_len, exp->e.move.val);
				break;

			default:
				break;
		}
	}

//--------------------------
//test
#ifdef	PASM_DEBUG
//	printf("\n%25s ----ir_exp_print(e) \n","");
#endif
//--------------------------
}




